// <auto-generated />
using System;
using FintasticFish.Data.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FintasticFish.Web.Migrations
{
    [DbContext(typeof(FintasticFishContext))]
    [Migration("20240401205946_disctription_field_Foods_Plants")]
    partial class disctription_field_Foods_Plants
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FintasticFish.Data.Entities.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AddressTypeId")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<int>("PostalCode")
                        .HasColumnType("int");

                    b.Property<int>("StateId")
                        .HasColumnType("int");

                    b.Property<string>("Street1")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Street2")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.HasIndex("AddressTypeId");

                    b.HasIndex("CountryId");

                    b.HasIndex("StateId");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("FintasticFish.Data.Entities.AddressType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("AddressTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Home"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Mailing"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Business"
                        });
                });

            modelBuilder.Entity("FintasticFish.Data.Entities.AggressionLevel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("AggressionLevels");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Docile"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Aggressive"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Moderate"
                        });
                });

            modelBuilder.Entity("FintasticFish.Data.Entities.AggressionType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("AggressionTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Territorial"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Social"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Time"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Temperature"
                        });
                });

            modelBuilder.Entity("FintasticFish.Data.Entities.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "North America"
                        },
                        new
                        {
                            Id = 2,
                            Name = "South America"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Africa"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Asia"
                        });
                });

            modelBuilder.Entity("FintasticFish.Data.Entities.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("FintasticFish.Data.Entities.CustomerPhoneNumber", b =>
                {
                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int>("PhoneNumberId")
                        .HasColumnType("int");

                    b.HasIndex("CustomerId");

                    b.HasIndex("PhoneNumberId");

                    b.ToTable("CustomerPhoneNumbers");
                });

            modelBuilder.Entity("FintasticFish.Data.Entities.CustomersAddress", b =>
                {
                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.HasIndex("AddressId");

                    b.HasIndex("CustomerId");

                    b.ToTable("CustomersAddresses");
                });

            modelBuilder.Entity("FintasticFish.Data.Entities.Fish", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AggressionLevelId")
                        .HasColumnType("int");

                    b.Property<int>("AggressionTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Image")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<bool>("IsSpecialOrder")
                        .HasColumnType("bit");

                    b.Property<int>("MeasurementId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Price")
                        .HasColumnType("smallmoney");

                    b.Property<string>("Size")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Species")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("Stock")
                        .HasColumnType("bit");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int");

                    b.Property<int>("WaterTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AggressionLevelId");

                    b.HasIndex("AggressionTypeId");

                    b.HasIndex("CountryId");

                    b.HasIndex("MeasurementId");

                    b.HasIndex("SupplierId");

                    b.HasIndex("WaterTypeId");

                    b.ToTable("Fishes");
                });

            modelBuilder.Entity("FintasticFish.Data.Entities.FishesFood", b =>
                {
                    b.Property<int>("FishId")
                        .HasColumnType("int");

                    b.Property<int>("FoodId")
                        .HasColumnType("int");

                    b.HasIndex("FishId");

                    b.HasIndex("FoodId");

                    b.ToTable("FishesFoods");
                });

            modelBuilder.Entity("FintasticFish.Data.Entities.Food", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FoodTypeId")
                        .HasColumnType("int");

                    b.Property<int>("MearsurementId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Price")
                        .HasColumnType("smallmoney");

                    b.Property<DateOnly>("SaleEndDate")
                        .HasColumnType("date");

                    b.Property<decimal>("SalePrice")
                        .HasColumnType("smallmoney");

                    b.Property<DateOnly>("SaleStartDate")
                        .HasColumnType("date");

                    b.Property<double>("Size")
                        .HasColumnType("float");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.Property<bool>("Taxable")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("FoodTypeId");

                    b.HasIndex("MearsurementId");

                    b.ToTable("Foods");
                });

            modelBuilder.Entity("FintasticFish.Data.Entities.FoodType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("FoodTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Flake"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Pellet"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Live"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Frozen"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Waffer"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Organic"
                        });
                });

            modelBuilder.Entity("FintasticFish.Data.Entities.Measurement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Measurements");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Inches, in"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Centimeters, cm"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Millimeters, mm"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Pounds, lbs"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Ounces, oz"
                        });
                });

            modelBuilder.Entity("FintasticFish.Data.Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateOnly>("OrderDate")
                        .HasColumnType("date");

                    b.Property<int>("OrderStatusId")
                        .HasColumnType("int");

                    b.Property<decimal>("Total")
                        .HasColumnType("smallmoney");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("OrderStatusId");

                    b.ToTable("Order", (string)null);
                });

            modelBuilder.Entity("FintasticFish.Data.Entities.OrderStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("OrderStatuses");
                });

            modelBuilder.Entity("FintasticFish.Data.Entities.OrdersFish", b =>
                {
                    b.Property<int>("FishId")
                        .HasColumnType("int");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.HasIndex("FishId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrdersFishes");
                });

            modelBuilder.Entity("FintasticFish.Data.Entities.OrdersFood", b =>
                {
                    b.Property<int>("FoodId")
                        .HasColumnType("int");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.HasIndex("FoodId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrdersFoods");
                });

            modelBuilder.Entity("FintasticFish.Data.Entities.PhoneNumber", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("PhoneNumberTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PhoneNumberTypeId");

                    b.ToTable("PhoneNumbers");
                });

            modelBuilder.Entity("FintasticFish.Data.Entities.PhoneNumberType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.ToTable("PhoneNumbersTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Cell"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Home"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Business"
                        });
                });

            modelBuilder.Entity("FintasticFish.Data.Entities.Plant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MearsurementId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("PlantTypeId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("smallmoney");

                    b.Property<DateOnly>("SaleEndDate")
                        .HasColumnType("date");

                    b.Property<decimal>("SalePrice")
                        .HasColumnType("smallmoney");

                    b.Property<DateOnly>("SaleStartDate")
                        .HasColumnType("date");

                    b.Property<double>("Size")
                        .HasColumnType("float");

                    b.Property<bool>("Stock")
                        .HasColumnType("bit");

                    b.Property<bool>("Taxable")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("MearsurementId");

                    b.HasIndex("PlantTypeId");

                    b.ToTable("Plants");
                });

            modelBuilder.Entity("FintasticFish.Data.Entities.PlantType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("PlantTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Submerged"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Emergent"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Free Floating"
                        });
                });

            modelBuilder.Entity("FintasticFish.Data.Entities.State", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("States");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Alabama"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Alaska"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Arizona"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Arkansas"
                        },
                        new
                        {
                            Id = 5,
                            Name = "California"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Colorado"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Connecticut"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Delaware"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Florida"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Georgia"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Hawaii"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Idaho"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Illinois"
                        },
                        new
                        {
                            Id = 14,
                            Name = "Indiana"
                        },
                        new
                        {
                            Id = 15,
                            Name = "Iowa"
                        },
                        new
                        {
                            Id = 16,
                            Name = "Kansas"
                        },
                        new
                        {
                            Id = 17,
                            Name = "Kentucky"
                        },
                        new
                        {
                            Id = 18,
                            Name = "Louisiana"
                        },
                        new
                        {
                            Id = 19,
                            Name = "Maine"
                        },
                        new
                        {
                            Id = 20,
                            Name = "Maryland"
                        },
                        new
                        {
                            Id = 21,
                            Name = "Massachusetts"
                        },
                        new
                        {
                            Id = 22,
                            Name = "Michigan"
                        },
                        new
                        {
                            Id = 23,
                            Name = "Minnesota"
                        },
                        new
                        {
                            Id = 24,
                            Name = "Mississippi"
                        },
                        new
                        {
                            Id = 25,
                            Name = "Missouri"
                        },
                        new
                        {
                            Id = 26,
                            Name = "Montana"
                        },
                        new
                        {
                            Id = 27,
                            Name = "Nebraska"
                        },
                        new
                        {
                            Id = 28,
                            Name = "Nevada"
                        },
                        new
                        {
                            Id = 29,
                            Name = "New Hampshire"
                        },
                        new
                        {
                            Id = 30,
                            Name = "New Jersey"
                        },
                        new
                        {
                            Id = 31,
                            Name = "New Mexico"
                        },
                        new
                        {
                            Id = 32,
                            Name = "New York"
                        },
                        new
                        {
                            Id = 33,
                            Name = "North Carolina"
                        },
                        new
                        {
                            Id = 34,
                            Name = "North Dakota"
                        },
                        new
                        {
                            Id = 35,
                            Name = "Ohio"
                        },
                        new
                        {
                            Id = 36,
                            Name = "Oklahoma"
                        },
                        new
                        {
                            Id = 37,
                            Name = "Oregon"
                        },
                        new
                        {
                            Id = 38,
                            Name = "Pennsylvania"
                        },
                        new
                        {
                            Id = 39,
                            Name = "Rhode Island"
                        },
                        new
                        {
                            Id = 40,
                            Name = "South Carolina"
                        },
                        new
                        {
                            Id = 41,
                            Name = "South Dakota"
                        },
                        new
                        {
                            Id = 42,
                            Name = "Tennessee"
                        },
                        new
                        {
                            Id = 43,
                            Name = "Texas"
                        },
                        new
                        {
                            Id = 44,
                            Name = "Utah"
                        },
                        new
                        {
                            Id = 45,
                            Name = "Vermont"
                        },
                        new
                        {
                            Id = 46,
                            Name = "Virginia"
                        },
                        new
                        {
                            Id = 47,
                            Name = "Washington"
                        },
                        new
                        {
                            Id = 48,
                            Name = "West Virginia"
                        },
                        new
                        {
                            Id = 49,
                            Name = "Wisconsin"
                        },
                        new
                        {
                            Id = 50,
                            Name = "Wyoming"
                        });
                });

            modelBuilder.Entity("FintasticFish.Data.Entities.Supplier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ContactName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SupplierTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Website")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("SupplierTypeId");

                    b.ToTable("Suppliers");
                });

            modelBuilder.Entity("FintasticFish.Data.Entities.SupplierPhoneNumber", b =>
                {
                    b.Property<int>("PhoneNumberId")
                        .HasColumnType("int");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int");

                    b.HasIndex("PhoneNumberId");

                    b.HasIndex("SupplierId");

                    b.ToTable("SupplierPhoneNumbers");
                });

            modelBuilder.Entity("FintasticFish.Data.Entities.SupplierType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("SupplierTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Fish"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Food"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Consumables"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Plants"
                        });
                });

            modelBuilder.Entity("FintasticFish.Data.Entities.WaterType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("WaterType", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Fresh"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Salt"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Brackish"
                        });
                });

            modelBuilder.Entity("FintasticFish.Data.Entities.Address", b =>
                {
                    b.HasOne("FintasticFish.Data.Entities.AddressType", "AddressType")
                        .WithMany("Addresses")
                        .HasForeignKey("AddressTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_Addresses_AddressTypes");

                    b.HasOne("FintasticFish.Data.Entities.Country", "Country")
                        .WithMany("Addresses")
                        .HasForeignKey("CountryId")
                        .IsRequired()
                        .HasConstraintName("FK_Addresses_Countries");

                    b.HasOne("FintasticFish.Data.Entities.State", "State")
                        .WithMany("Addresses")
                        .HasForeignKey("StateId")
                        .IsRequired()
                        .HasConstraintName("FK_Addresses_States");

                    b.Navigation("AddressType");

                    b.Navigation("Country");

                    b.Navigation("State");
                });

            modelBuilder.Entity("FintasticFish.Data.Entities.CustomerPhoneNumber", b =>
                {
                    b.HasOne("FintasticFish.Data.Entities.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .IsRequired()
                        .HasConstraintName("FK_CustomerPhoneNumber_Customer");

                    b.HasOne("FintasticFish.Data.Entities.PhoneNumber", "PhoneNumber")
                        .WithMany()
                        .HasForeignKey("PhoneNumberId")
                        .IsRequired()
                        .HasConstraintName("FK_CustomerPhoneNumber_PhoneNumber");

                    b.Navigation("Customer");

                    b.Navigation("PhoneNumber");
                });

            modelBuilder.Entity("FintasticFish.Data.Entities.CustomersAddress", b =>
                {
                    b.HasOne("FintasticFish.Data.Entities.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .IsRequired()
                        .HasConstraintName("FK_CustomersAddresses_Addresses");

                    b.HasOne("FintasticFish.Data.Entities.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .IsRequired()
                        .HasConstraintName("FK_CustomersAddresses_Customers");

                    b.Navigation("Address");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("FintasticFish.Data.Entities.Fish", b =>
                {
                    b.HasOne("FintasticFish.Data.Entities.AggressionLevel", "AggressionLevel")
                        .WithMany("Fish")
                        .HasForeignKey("AggressionLevelId")
                        .IsRequired()
                        .HasConstraintName("FK_Fishes_AggressionLevels");

                    b.HasOne("FintasticFish.Data.Entities.AggressionType", "AggressionType")
                        .WithMany("Fish")
                        .HasForeignKey("AggressionTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_Fishes_AggressionTypes");

                    b.HasOne("FintasticFish.Data.Entities.Country", "Country")
                        .WithMany("Fish")
                        .HasForeignKey("CountryId")
                        .IsRequired()
                        .HasConstraintName("FK_Fishes_Countries");

                    b.HasOne("FintasticFish.Data.Entities.Measurement", "Measurement")
                        .WithMany("Fish")
                        .HasForeignKey("MeasurementId")
                        .IsRequired()
                        .HasConstraintName("FK_Fishes_Measurements");

                    b.HasOne("FintasticFish.Data.Entities.Supplier", "Supplier")
                        .WithMany("Fish")
                        .HasForeignKey("SupplierId")
                        .IsRequired()
                        .HasConstraintName("FK_Fishes_Suppliers");

                    b.HasOne("FintasticFish.Data.Entities.WaterType", "WaterType")
                        .WithMany("Fish")
                        .HasForeignKey("WaterTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_Fishes_WaterType");

                    b.Navigation("AggressionLevel");

                    b.Navigation("AggressionType");

                    b.Navigation("Country");

                    b.Navigation("Measurement");

                    b.Navigation("Supplier");

                    b.Navigation("WaterType");
                });

            modelBuilder.Entity("FintasticFish.Data.Entities.FishesFood", b =>
                {
                    b.HasOne("FintasticFish.Data.Entities.Fish", "Fish")
                        .WithMany()
                        .HasForeignKey("FishId")
                        .IsRequired()
                        .HasConstraintName("FK_FishesFoods_Fishes");

                    b.HasOne("FintasticFish.Data.Entities.Food", "Food")
                        .WithMany()
                        .HasForeignKey("FoodId")
                        .IsRequired()
                        .HasConstraintName("FK_FishesFoods_Foods");

                    b.Navigation("Fish");

                    b.Navigation("Food");
                });

            modelBuilder.Entity("FintasticFish.Data.Entities.Food", b =>
                {
                    b.HasOne("FintasticFish.Data.Entities.FoodType", "FoodType")
                        .WithMany("Foods")
                        .HasForeignKey("FoodTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_Foods_FoodTypes");

                    b.HasOne("FintasticFish.Data.Entities.Measurement", "Mearsurement")
                        .WithMany("Foods")
                        .HasForeignKey("MearsurementId")
                        .IsRequired()
                        .HasConstraintName("FK_Foods_Measurements");

                    b.Navigation("FoodType");

                    b.Navigation("Mearsurement");
                });

            modelBuilder.Entity("FintasticFish.Data.Entities.Order", b =>
                {
                    b.HasOne("FintasticFish.Data.Entities.Address", "Address")
                        .WithMany("Orders")
                        .HasForeignKey("AddressId")
                        .IsRequired()
                        .HasConstraintName("FK_Order_Addresses");

                    b.HasOne("FintasticFish.Data.Entities.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .IsRequired()
                        .HasConstraintName("FK_Order_Customers");

                    b.HasOne("FintasticFish.Data.Entities.OrderStatus", "OrderStatus")
                        .WithMany("Orders")
                        .HasForeignKey("OrderStatusId")
                        .IsRequired()
                        .HasConstraintName("FK_Order_OrderStatuses1");

                    b.Navigation("Address");

                    b.Navigation("Customer");

                    b.Navigation("OrderStatus");
                });

            modelBuilder.Entity("FintasticFish.Data.Entities.OrdersFish", b =>
                {
                    b.HasOne("FintasticFish.Data.Entities.Fish", "Fish")
                        .WithMany()
                        .HasForeignKey("FishId")
                        .IsRequired()
                        .HasConstraintName("FK_OrdersFishes_Fishes");

                    b.HasOne("FintasticFish.Data.Entities.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .IsRequired()
                        .HasConstraintName("FK_OrdersFishes_Order");

                    b.Navigation("Fish");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("FintasticFish.Data.Entities.OrdersFood", b =>
                {
                    b.HasOne("FintasticFish.Data.Entities.Food", "Food")
                        .WithMany()
                        .HasForeignKey("FoodId")
                        .IsRequired()
                        .HasConstraintName("FK_OrdersFoods_Foods");

                    b.HasOne("FintasticFish.Data.Entities.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .IsRequired()
                        .HasConstraintName("FK_OrdersFoods_Order");

                    b.Navigation("Food");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("FintasticFish.Data.Entities.PhoneNumber", b =>
                {
                    b.HasOne("FintasticFish.Data.Entities.PhoneNumberType", "PhoneNumberType")
                        .WithMany("PhoneNumber")
                        .HasForeignKey("PhoneNumberTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_PhoneNumber_PhoneNumberTypes");

                    b.Navigation("PhoneNumberType");
                });

            modelBuilder.Entity("FintasticFish.Data.Entities.Plant", b =>
                {
                    b.HasOne("FintasticFish.Data.Entities.Measurement", "Mearsurement")
                        .WithMany("Plants")
                        .HasForeignKey("MearsurementId")
                        .IsRequired()
                        .HasConstraintName("FK_Plant_Measurements");

                    b.HasOne("FintasticFish.Data.Entities.PlantType", "PlantType")
                        .WithMany("Plant")
                        .HasForeignKey("PlantTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_Plant_PlantTypes");

                    b.Navigation("Mearsurement");

                    b.Navigation("PlantType");
                });

            modelBuilder.Entity("FintasticFish.Data.Entities.Supplier", b =>
                {
                    b.HasOne("FintasticFish.Data.Entities.Country", "Country")
                        .WithMany("Suppliers")
                        .HasForeignKey("CountryId")
                        .IsRequired()
                        .HasConstraintName("FK_Suppliers_Countries");

                    b.HasOne("FintasticFish.Data.Entities.SupplierType", "SupplierType")
                        .WithMany("Suppliers")
                        .HasForeignKey("SupplierTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_Suppliers_Suppliers");

                    b.Navigation("Country");

                    b.Navigation("SupplierType");
                });

            modelBuilder.Entity("FintasticFish.Data.Entities.SupplierPhoneNumber", b =>
                {
                    b.HasOne("FintasticFish.Data.Entities.PhoneNumber", "PhoneNumber")
                        .WithMany()
                        .HasForeignKey("PhoneNumberId")
                        .IsRequired()
                        .HasConstraintName("FK_SupplierPhoneNumber_PhoneNumber");

                    b.HasOne("FintasticFish.Data.Entities.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId")
                        .IsRequired()
                        .HasConstraintName("FK_SupplierPhoneNumber_Supplier");

                    b.Navigation("PhoneNumber");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("FintasticFish.Data.Entities.Address", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("FintasticFish.Data.Entities.AddressType", b =>
                {
                    b.Navigation("Addresses");
                });

            modelBuilder.Entity("FintasticFish.Data.Entities.AggressionLevel", b =>
                {
                    b.Navigation("Fish");
                });

            modelBuilder.Entity("FintasticFish.Data.Entities.AggressionType", b =>
                {
                    b.Navigation("Fish");
                });

            modelBuilder.Entity("FintasticFish.Data.Entities.Country", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("Fish");

                    b.Navigation("Suppliers");
                });

            modelBuilder.Entity("FintasticFish.Data.Entities.Customer", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("FintasticFish.Data.Entities.FoodType", b =>
                {
                    b.Navigation("Foods");
                });

            modelBuilder.Entity("FintasticFish.Data.Entities.Measurement", b =>
                {
                    b.Navigation("Fish");

                    b.Navigation("Foods");

                    b.Navigation("Plants");
                });

            modelBuilder.Entity("FintasticFish.Data.Entities.OrderStatus", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("FintasticFish.Data.Entities.PhoneNumberType", b =>
                {
                    b.Navigation("PhoneNumber");
                });

            modelBuilder.Entity("FintasticFish.Data.Entities.PlantType", b =>
                {
                    b.Navigation("Plant");
                });

            modelBuilder.Entity("FintasticFish.Data.Entities.State", b =>
                {
                    b.Navigation("Addresses");
                });

            modelBuilder.Entity("FintasticFish.Data.Entities.Supplier", b =>
                {
                    b.Navigation("Fish");
                });

            modelBuilder.Entity("FintasticFish.Data.Entities.SupplierType", b =>
                {
                    b.Navigation("Suppliers");
                });

            modelBuilder.Entity("FintasticFish.Data.Entities.WaterType", b =>
                {
                    b.Navigation("Fish");
                });
#pragma warning restore 612, 618
        }
    }
}
