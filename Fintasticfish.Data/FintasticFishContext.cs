// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using System.Reflection.Metadata;
using Microsoft.EntityFrameworkCore;

namespace FintasticFish.Data.Entities;

public partial class FintasticFishContext : DbContext
{
    //public FintasticFishContext()
    //{
    //WorkAround: Commented out for creating controllers.
    //}
    public FintasticFishContext(DbContextOptions<FintasticFishContext> options)
        : base(options)
    {
    }
    //protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
    //{
    //    //TODO Move connection string to a secure location
    //    optionsBuilder.UseSqlServer("Data Source=RAINBOW-PUKE\\SQLEXPRESS;Initial Catalog=FintasticFish; TrustServerCertificate=True; Integrated Security=SSPI;");

    //WorkAround: Commented out for creating controllers.
    //}
    public virtual DbSet<Address> Addresses { get; set; }

    public virtual DbSet<AddressType> AddressTypes { get; set; }

    public virtual DbSet<AggressionLevel> AggressionLevels { get; set; }

    public virtual DbSet<AggressionType> AggressionTypes { get; set; }

    public virtual DbSet<Country> Countries { get; set; }

    public virtual DbSet<Customer> Customers { get; set; }

    public virtual DbSet<CustomersAddress> CustomersAddresses { get; set; }

    public virtual DbSet<Fish> Fishes { get; set; }

    public virtual DbSet<FishesFood> FishesFoods { get; set; }

    public virtual DbSet<Food> Foods { get; set; }

    public virtual DbSet<FoodType> FoodTypes { get; set; }

    public virtual DbSet<Measurement> Measurements { get; set; }

    public virtual DbSet<Order> Orders { get; set; }

    public virtual DbSet<OrderStatus> OrderStatuses { get; set; }

    public virtual DbSet<OrdersFish> OrdersFishes { get; set; }

    public virtual DbSet<OrdersFood> OrdersFoods { get; set; }

    public virtual DbSet<PhoneNumber> PhoneNumbers { get; set; }

    public virtual DbSet<PhoneNumberType> PhoneNumbersTypes { get; set; }

    public virtual DbSet<State> States { get; set; }

    public virtual DbSet<Supplier> Suppliers { get; set; }

    public virtual DbSet<SupplierType> SupplierTypes { get; set; }

    public virtual DbSet<WaterType> WaterTypes { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Address>(entity =>
        {
            entity.Property(e => e.City)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.Street1)
                .IsRequired()
                .HasMaxLength(250);
            entity.Property(e => e.Street2)
                .HasMaxLength(250);

            entity.HasOne(d => d.AddressType).WithMany(p => p.Addresses)
                .HasForeignKey(d => d.AddressTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Addresses_AddressTypes");

            entity.HasOne(d => d.Country).WithMany(p => p.Addresses)
                .HasForeignKey(d => d.CountryId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Addresses_Countries");

            entity.HasOne(d => d.State).WithMany(p => p.Addresses)
                .HasForeignKey(d => d.StateId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Addresses_States");
        });

        modelBuilder.Entity<AddressType>(entity =>
        {
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(100);
        });
        modelBuilder.Entity<AddressType>().HasData(new AddressType { Id = 1, Name = "Home" },
                                                   new AddressType { Id = 2, Name = "Mailing" },
                                                   new AddressType { Id = 3, Name = "Business" });

        modelBuilder.Entity<AggressionLevel>(entity =>
        {
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(100);
        });

        modelBuilder.Entity<AggressionLevel>().HasData(new AggressionLevel { Id = 1, Name = "Docile" },
                                                       new AggressionLevel { Id = 2, Name = "Aggressive" },
                                                       new AggressionLevel { Id = 3, Name = "Moderate" });

        modelBuilder.Entity<AggressionType>(entity =>
        {
            entity.Property(e => e.Name)
                 .IsRequired()
                 .HasMaxLength(50);
        });

        modelBuilder.Entity<AggressionType>().HasData(new AggressionType { Id = 1, Name = "Territorial" },
                                                      new AggressionType { Id = 2, Name = "Social" },
                                                      new AggressionType { Id = 3, Name = "Time" },
                                                      new AggressionType { Id = 4, Name = "Temperature" });

        modelBuilder.Entity<Country>(entity =>
        {
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(100);
        });

        modelBuilder.Entity<Country>().HasData(new Country { Id = 1, Name = "North America" },
                                               new Country { Id = 2, Name = "South America" },
                                               new Country { Id = 3, Name = "Africa" },
                                               new Country { Id = 4, Name = "Asia" });

        modelBuilder.Entity<Customer>(entity =>
        {
            entity.Property(e => e.FirstName)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.LastName)
                .IsRequired()
                .HasMaxLength(100);
        });

        modelBuilder.Entity<CustomersAddress>(entity =>
        {
            entity.HasNoKey();

            entity.HasOne(d => d.Address).WithMany()
                .HasForeignKey(d => d.AddressId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CustomersAddresses_Addresses");

            entity.HasOne(d => d.Customer).WithMany()
                .HasForeignKey(d => d.CustomerId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CustomersAddresses_Customers");
        });

        modelBuilder.Entity<CustomerPhoneNumber>(entity =>
        {
            entity.HasNoKey();

            entity.HasOne(d => d.Customer).WithMany()
                .HasForeignKey(d => d.CustomerId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CustomerPhoneNumber_Customer");

            entity.HasOne(d => d.PhoneNumber).WithMany()
                .HasForeignKey(d => d.PhoneNumberId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CustomerPhoneNumber_PhoneNumber");
        });

        modelBuilder.Entity<Fish>(entity =>
        {
            entity.Property(e => e.Color)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.Description).IsRequired();
            entity.Property(e => e.Image).IsRequired();
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.Price).HasColumnType("smallmoney");
            entity.Property(e => e.Size)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.Species)
                .IsRequired()
                .HasMaxLength(100);

            entity.HasOne(d => d.AggressionLevel).WithMany(p => p.Fish)
                .HasForeignKey(d => d.AggressionLevelId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Fishes_AggressionLevels");

            entity.HasOne(d => d.AggressionType).WithMany(p => p.Fish)
                .HasForeignKey(d => d.AggressionTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Fishes_AggressionTypes");

            entity.HasOne(d => d.Country).WithMany(p => p.Fish)
                .HasForeignKey(d => d.CountryId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Fishes_Countries");

            entity.HasOne(d => d.Measurement).WithMany(p => p.Fish)
                .HasForeignKey(d => d.MeasurementId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Fishes_Measurements");

            entity.HasOne(d => d.Supplier).WithMany(p => p.Fish)
                .HasForeignKey(d => d.SupplierId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Fishes_Suppliers");

            entity.HasOne(d => d.WaterType).WithMany(p => p.Fish)
                .HasForeignKey(d => d.WaterTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Fishes_WaterType");
        });

        modelBuilder.Entity<FishesFood>(entity =>
        {
            entity.HasNoKey();

            entity.HasOne(d => d.Fish).WithMany()
                .HasForeignKey(d => d.FishId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FishesFoods_Fishes");

            entity.HasOne(d => d.Food).WithMany()
                .HasForeignKey(d => d.FoodId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FishesFoods_Foods");
        });

        modelBuilder.Entity<Food>(entity =>
        {
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.Price).HasColumnType("smallmoney");
            entity.Property(e => e.SalePrice).HasColumnType("smallmoney");

            entity.HasOne(d => d.FoodType).WithMany(p => p.Foods)
                .HasForeignKey(d => d.FoodTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Foods_FoodTypes");

            entity.HasOne(d => d.Mearsurement).WithMany(p => p.Foods)
                .HasForeignKey(d => d.MearsurementId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Foods_Measurements");
        });

        modelBuilder.Entity<FoodType>(entity =>
        {
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(100);
        });

        modelBuilder.Entity<FoodType>().HasData(new FoodType { Id = 1, Name = "Flake" },
                                                new FoodType { Id = 2, Name = "Pellet" },
                                                new FoodType { Id = 3, Name = "Live" },
                                                new FoodType { Id = 4, Name = "Frozen" },
                                                new FoodType { Id = 5, Name = "Waffer" },
                                                new FoodType { Id = 6, Name = "Organic" });

        modelBuilder.Entity<Measurement>(entity =>
        {
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(100);
        });

        modelBuilder.Entity<Measurement>().HasData(new Measurement { Id = 1, Name = "Inches, in" },
                                                   new Measurement { Id = 2, Name = "Centimeters, cm" },
                                                   new Measurement { Id = 3, Name = "Millimeters, mm" },
                                                   new Measurement { Id = 4, Name = "Pounds, lbs" },
                                                   new Measurement { Id = 5, Name = "Ounces, oz" });

        modelBuilder.Entity<Order>(entity =>
        {
            entity.ToTable("Order");

            entity.Property(e => e.Total).HasColumnType("smallmoney");

            entity.HasOne(d => d.Address).WithMany(p => p.Orders)
                .HasForeignKey(d => d.AddressId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Order_Addresses");

            entity.HasOne(d => d.Customer).WithMany(p => p.Orders)
                .HasForeignKey(d => d.CustomerId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Order_Customers");

            entity.HasOne(d => d.OrderStatus).WithMany(p => p.Orders)
                .HasForeignKey(d => d.OrderStatusId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Order_OrderStatuses1");
        });

        modelBuilder.Entity<OrderStatus>(entity =>
        {
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(100);
        });

        modelBuilder.Entity<OrdersFish>(entity =>
        {
            entity.HasNoKey();

            entity.HasOne(d => d.Fish).WithMany()
                .HasForeignKey(d => d.FishId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_OrdersFishes_Fishes");

            entity.HasOne(d => d.Order).WithMany()
                .HasForeignKey(d => d.OrderId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_OrdersFishes_Order");
        });

        modelBuilder.Entity<OrdersFood>(entity =>
        {
            entity.HasNoKey();

            entity.HasOne(d => d.Food).WithMany()
                .HasForeignKey(d => d.FoodId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_OrdersFoods_Foods");

            entity.HasOne(d => d.Order).WithMany()
                .HasForeignKey(d => d.OrderId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_OrdersFoods_Order");
        });

        modelBuilder.Entity<PhoneNumber>(entity =>
        {
            entity.Property(e => e.Number)
                 .IsRequired()
                 .HasMaxLength(50);

            entity.HasOne(d => d.PhoneNumberType).WithMany(p => p.PhoneNumber)
                 .HasForeignKey(d => d.PhoneNumberTypeId)
                 .OnDelete(DeleteBehavior.ClientSetNull)
                 .HasConstraintName("FK_PhoneNumber_PhoneNumberTypes");
        });

        modelBuilder.Entity<PhoneNumberType>(entity =>
        {
            entity.Property(e => e.Name)
                  .IsRequired()
                  .HasMaxLength(10);
        });

        modelBuilder.Entity<PhoneNumberType>().HasData(new PhoneNumberType { Id = 1, Name = "Cell"},
                                                       new PhoneNumberType { Id = 2, Name = "Home"},
                                                       new PhoneNumberType { Id = 3, Name = "Business" });
        
        modelBuilder.Entity<State>(entity =>
        {
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(100);
        });

        modelBuilder.Entity<State>().HasData(new State { Id = 1, Name = "Alabama" },
                                             new State { Id = 2, Name = "Alaska" },
                                             new State { Id = 3, Name = "Arizona" },
                                             new State { Id = 4, Name = "Arkansas" },
                                             new State { Id = 5, Name = "California" },
                                             new State { Id = 6, Name = "Colorado" },
                                             new State { Id = 7, Name = "Connecticut" },
                                             new State { Id = 8, Name = "Delaware" },
                                             new State { Id = 9, Name = "Florida" },
                                             new State { Id = 10, Name = "Georgia" },
                                             new State { Id = 11, Name = "Hawaii" },
                                             new State { Id = 12, Name = "Idaho" },
                                             new State { Id = 13, Name = "Illinois" },
                                             new State { Id = 14, Name = "Indiana" },
                                             new State { Id = 15, Name = "Iowa" },
                                             new State { Id = 16, Name = "Kansas" },
                                             new State { Id = 17, Name = "Kentucky" },
                                             new State { Id = 18, Name = "Louisiana" },
                                             new State { Id = 19, Name = "Maine" },
                                             new State { Id = 20, Name = "Maryland" },
                                             new State { Id = 21, Name = "Massachusetts" },
                                             new State { Id = 22, Name = "Michigan" },
                                             new State { Id = 23, Name = "Minnesota" },
                                             new State { Id = 24, Name = "Mississippi" },
                                             new State { Id = 25, Name = "Missouri" },
                                             new State { Id = 26, Name = "Montana" },
                                             new State { Id = 27, Name = "Nebraska" },
                                             new State { Id = 28, Name = "Nevada" },
                                             new State { Id = 29, Name = "New Hampshire" },
                                             new State { Id = 30, Name = "New Jersey" },
                                             new State { Id = 31, Name = "New Mexico" },
                                             new State { Id = 32, Name = "New York" },
                                             new State { Id = 33, Name = "North Carolina" },
                                             new State { Id = 34, Name = "North Dakota" },
                                             new State { Id = 35, Name = "Ohio" },
                                             new State { Id = 36, Name = "Oklahoma" },
                                             new State { Id = 37, Name = "Oregon" },
                                             new State { Id = 38, Name = "Pennsylvania" },
                                             new State { Id = 39, Name = "Rhode Island" },
                                             new State { Id = 40, Name = "South Carolina" },
                                             new State { Id = 41, Name = "South Dakota" },
                                             new State { Id = 42, Name = "Tennessee" },
                                             new State { Id = 43, Name = "Texas" },
                                             new State { Id = 44, Name = "Utah" },
                                             new State { Id = 45, Name = "Vermont" },
                                             new State { Id = 46, Name = "Virginia" },
                                             new State { Id = 47, Name = "Washington" },
                                             new State { Id = 48, Name = "West Virginia" },
                                             new State { Id = 49, Name = "Wisconsin" },
                                             new State { Id = 50, Name = "Wyoming" });

        modelBuilder.Entity<Supplier>(entity =>
        {
            entity.Property(e => e.ContactName)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.Email)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.Notes).IsRequired();
            
            entity.Property(e => e.Website)
                .IsRequired()
                .HasMaxLength(400);

            entity.HasOne(d => d.Country).WithMany(p => p.Suppliers)
                .HasForeignKey(d => d.CountryId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Suppliers_Countries");

            entity.HasOne(d => d.SupplierType).WithMany(p => p.Suppliers)
                .HasForeignKey(d => d.SupplierTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Suppliers_Suppliers");
        });

        modelBuilder.Entity<SupplierPhoneNumber>(entity =>
        {
            entity.HasNoKey();

            entity.HasOne(d => d.Supplier).WithMany()
                .HasForeignKey(d => d.SupplierId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SupplierPhoneNumber_Supplier");

            entity.HasOne(d => d.PhoneNumber).WithMany()
                .HasForeignKey(d => d.PhoneNumberId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SupplierPhoneNumber_PhoneNumber");
        });

        modelBuilder.Entity<SupplierType>(entity =>
        {
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(100);
        });

        modelBuilder.Entity<SupplierType>().HasData(new SupplierType { Id = 1, Name = "Fish" },
                                                    new SupplierType { Id = 2, Name = "Food" },
                                                    new SupplierType { Id = 3, Name = "Consumables" },
                                                    new SupplierType { Id = 4, Name = "Plants" });

        modelBuilder.Entity<WaterType>(entity =>
        {
            entity.ToTable("WaterType");

            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(100);
        });

        modelBuilder.Entity<WaterType>().HasData(new WaterType { Id = 1, Name = "Fresh" },
                                                 new WaterType { Id = 2, Name = "Salt" },
                                                 new WaterType { Id = 3, Name = "Brackish" });

       OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}